name: Development
run-name: ${{ github.actor }} is compiling our Sample App ðŸš€
on: [push]
jobs:
  compile:
    name: OpenEdge Compile job
    runs-on: self-hosted
    steps:
      - name: Clean-up
        run: rm -Rf *
      - uses: actions/checkout@v3
      - run: sh gradlew clean build
        working-directory: ./SportsApp
      - uses: actions/upload-artifact@v2  # upload test results
        if: success() || failure()        # run this step even if previous step failed
        with:
          name: test-results
          path: ./SportsApp/Sports/build/test-results/test/results.xml
      - name: upload zip file to nexus
        run: curl -v -k -u admin:${{secrets.DOCKER_PWD}} --upload-file ./build/distributions/sportsApp.tar.gz ${{vars.NEXUS_URL}}/com/progess/${{vars.SAMPLEAPP_NAME}}/${{vars.SAMPLEAPP_VERSION}}/${{vars.SAMPLEAPP_NAME}}-${{vars.SAMPLEAPP_VERSION}}.tar.gz
        working-directory: ./SportsApp
  deploy:
    name: Sample App Deploy
    needs: compile
    permissions: write-all
    runs-on: self-hosted
    defaults:
      run:
        working-directory: ${{vars.SAMPLEAPP_DIR}}
    steps:
      - name: Clean-up
        run: rm -Rf *
      - name: Download the application artifact
        run: wget ${{vars.NEXUS_URL}}/com/progess/${{vars.SAMPLEAPP_NAME}}/${{vars.SAMPLEAPP_VERSION}}/${{vars.SAMPLEAPP_NAME}}-${{vars.SAMPLEAPP_VERSION}}.tar.gz --no-check-certificate
      - name: Extract the artifact
        run: tar -zxf ${{vars.SAMPLEAPP_NAME}}-${{vars.SAMPLEAPP_VERSION}}.tar.gz
      - run: mkdir ./deploy/license  
      - name: Download the OpenEdge License file
        run: wget -cO - ${{vars.NEXUS_URL}}/OpenEdge/linux/12.8.0/linux-12.8.0-license.cfg > ./deploy/license/progress.cfg --no-check-certificate
      - name: Undeploy previous version of Sample App
        run: sudo sh undeploy.sh
        working-directory: ${{vars.SAMPLEAPP_DIR}}/deploy
      - name: Deploy new version of Sample App
        run: sudo sh deploy.sh
        working-directory: ${{vars.SAMPLEAPP_DIR}}/deploy
      - name: Run Trivy vulnerability scanner for 'sports:latest'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'docker.io/sports:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
      - name: Upload Trivy scan results to GitHub Security tab for 'sports:latest'
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
      - name: Run Trivy vulnerability scanner for 'eclipse-temurin:17.0.3_7-jdk-centos7'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'eclipse-temurin:17.0.3_7-jdk-centos7'
          format: 'sarif'
          output: 'trivy-results-jdk.sarif'
      - name: Upload Trivy scan results to GitHub Security tab for 'eclipse-temurin:17.0.3_7-jdk-centos7'
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results-jdk.sarif'
  report:
    name: Publish Reports 
    permissions: write-all
    needs: compile
    if: always()
    runs-on: self-hosted
    steps:
    - name: Retrieve saved test report
      uses: actions/download-artifact@v2
      with:
        name: test-results
        path: test-results/test
    # - uses: dorny/test-reporter@v1.6.0
    #   with:
    #     name: ABL Unit Test Results           # Name of the check run which will be created
    #     path: test-results/test/results.xml   # Path to test results
    #     reporter: java-junit                  # Format of test results
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.8
    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action/composite@v2
      with:
        files: test-results/**/*.xml
#  test:
#    name: Test deploy of Sample App
#    needs: deploy
#    runs-on: self-hosted
#    defaults:
#      run:
#        working-directory: /opt/sampleapp
#    steps:
#      - name: Check application life
#        run: wget -cO - https://ec2-54-161-12-110.compute-1.amazonaws.com:8811/Sports/rest/SportsService/Customer > customer.json --no-check-certificate
        
      
  
    
