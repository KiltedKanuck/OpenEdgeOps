/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn more about Gradle by exploring our samples at https://docs.gradle.org/7.3.3/samples
 */
plugins { 
    id "progress.openedge.abl" version "2.2.1" 
}

// Gather required variables
def stageEnv = System.getProperty("STAGE_ENVIRONMENT")
stageEnv = stageEnv != null ? stageEnv : System.getenv("STAGE_ENVIRONMENT")
def STAGE_ENVIRONMENT = stageEnv != null ? stageEnv : "dev"

println "DLC: ${abl.dlcHome}"
println "Stage Environment: ${STAGE_ENVIRONMENT}"

group = 'com.progress.openedge'
version = "1.0.0"
description = 'Sports App'

print "Name ${name}"

abl {
    if (STAGE_ENVIRONMENT == "dev") {
         dbConnection {
            dbName="${buildDir}/db/sports2020/sports"
            connectionParameters = "-1"
        }
    } else {
        dbConnection {
            parameterFile='conf/startup.pf'
        }
    }
}

// ABL App tasks
task createSports2020(type: CreateDB){
	dbName = 'sports'
	sourceDb = "${dlcHome}/sports2020"
	outputDir = "${buildDir}/db/sports2020"
}
if (STAGE_ENVIRONMENT == "dev") {
    compileAbl.dependsOn "createSports2020"
}

tasks.named("compileAbl-root-AppServer"){
    rcodeDir = "${buildDir}/rcode/AppServer"
}

tasks.named("compileAbl-root-PASOEContent-WEB-INF-openedge"){
    rcodeDir = "${buildDir}/rcode/PASOEContent/WEB-INF/openedge"
}

tasks.named("compileAbl-root-tests-AppServer"){
    rcodeDir = "${buildDir}/rcode/tests/AppServer"
}

task testABLApp(type: ABLUnit){
    source("tests/AppServer")
    include("**/*Suite.cls")
    propath("tests/AppServer", "AppServer")
    outputDir = "${buildDir}/test-results/test"
    arguments = [haltOnFailure: "true"]
}
if (STAGE_ENVIRONMENT == "dev") {
    testABLApp.dependsOn "createSports2020"
}
check.dependsOn "testABLApp"

task packageWebApp(type: OEWar){
    webAppName = "Sports"
    archiveVersion = "" // to ignore version in the archive name, otherwise has to be handled during deployment
    verbose = true
    projectLocation = project.projectDir
    println "projectLocation: ${projectLocation.get()}"
    destinationDirectory = project.file "${project.distsDirectory.get()}/webapps"

    // exclude Sources from 'openedge' directory
    // (the ANT task used internally does it by default but added here anyway)
    exclude "PASOEContent/WEB-INF/openedge/*.(cls|p|i)"

    webInf {
        from("${buildDir}/rcode/PASOEContent/WEB-INF/openedge")
        into("openedge")
    }

    manifest {
        attributes "Implementation-Title": "My Sports ABL Web Application"
        attributes "Implementation-Version": "1.0.0"
        // from ("PASOEContent/META-INF/MANIFEST.MF")
    }
}
packageWebApp.dependsOn "compileAbl-root-PASOEContent-WEB-INF-openedge"

task packageABLApp(type: Oear) {
    ablAppName = "Sports"
    archiveVersion = ""
    destinationDirectory = project.file "${project.distsDirectory.get()}/ablapps"  //will create 'Sports.oear' file at this location
    tlr {
        from 'tlr'
        include '**/*.properties'
        include '**/*.xml'
    }
    webapps {
        from "${project.distsDirectory.get()}/webapps"
        include '**/*.war'
        include '**/*.zip'
    }
    openedge {
        from "${buildDir}/rcode/AppServer"
        include '**/*.r'
    }
    conf {
        from 'conf'
        exclude '**/*.MF'   //exclude direct copy of manifest file and append using manifest section
    }
    manifest {
        attributes "Implementation-Title": "My Sports ABL Application"
        attributes "Implementation-Version": "1.0.0"
        // from ("conf/MANIFEST.MF")
    }
}
packageABLApp.dependsOn "compileAbl-root-AppServer"
packageABLApp.dependsOn "packageWebApp"
assemble.dependsOn "packageABLApp"

// task dockerBuild(type:Exec) {
//     workingDir "${buildDir}/docker"
//     commandLine 'bash', '-c', "export IMAGE_NAME=${project.name.toLowerCase()} && sh build.sh"
//     doFirst {
//         copy {
//             from "${project.distsDirectory.get()}/ablapps/"
//             into "${buildDir}/docker/ablapps"
//         }
//         copy {
//             from "docker"
//             into "${buildDir}/docker"
//         }
//     }
// }
// dockerBuild.dependsOn build